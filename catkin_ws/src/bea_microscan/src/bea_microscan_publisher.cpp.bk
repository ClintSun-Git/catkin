/*******************************************************************************
* Copyright (c) 2020 BEA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* * Redistributions of source code must retain the above copyright notice, this
*   list of conditions and the following disclaimer.
*
* * Redistributions in binary form must reproduce the above copyright notice,
*   this list of conditions and the following disclaimer in the documentation
*   and/or other materials provided with the distribution.
*
* * Neither the name of the copyright holder nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*******************************************************************************/

#include <ros/ros.h>
#include <std_msgs/UInt16.h>
#include <sensor_msgs/LaserScan.h>
#include <boost/asio.hpp>
#include <bea_microscan/bea_microscan.h>

namespace bea_microscan
{
LFCDLaser::LFCDLaser(const std::string& port, uint32_t baud_rate, boost::asio::io_service& io)
  : port_(port), baud_rate_(baud_rate), shutting_down_(false), serial_(io, port_)
{
  serial_.set_option(boost::asio::serial_port_base::baud_rate(baud_rate_));

  // Init the uscan head
  // stop the head first
  uint8_t initarray1[16] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x17, 0x00, 0x49, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray1));
  uint8_t initarray2[16] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0x17, 0x00, 0x47, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray2));


  // setup the number of spots
  // set curtain 2 = 0 spot
  uint8_t initarray3[22] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x2C, 0x50, 0x0E, 0x00, 0x00, 0x85, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray3));
  uint8_t initarray4[20] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x2C, 0x50, 0x0E, 0x84, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray4));
  
  // set curtain 3 = 0 spot
  uint8_t initarray5[22] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x2C, 0x50, 0x0F, 0x00, 0x00, 0x86, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray5));
  uint8_t initarray6[20] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x2C, 0x50, 0x0F, 0x85, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray6));

  // set curtain 1 = 250 spot
  uint8_t initarray7[22] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x2C, 0x50, 0x0D, 0xFA, 0x00, 0x7E, 0x03};
  boost::asio::write(serial_, boost::asio::buffer(initarray7));
  uint8_t initarray8[20] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x2C, 0x50, 0x0D, 0x83, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray8));

  // set curtain 4 = 250 spot
  uint8_t initarray9[22] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x2C, 0x50, 0x10, 0xFA, 0x00, 0x81, 0x03};
  boost::asio::write(serial_, boost::asio::buffer(initarray9));
  uint8_t initarray10[20] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x2C, 0x50, 0x10, 0x86, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray10));

  // start the head again.
  uint8_t initarray11[16] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x17, 0x00, 0x49, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray11));
  uint8_t initarray12[16] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0x17, 0x00, 0x47, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray12));
  uint8_t initarray13[16] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x17, 0x01, 0x4A, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray13));
  uint8_t initarray14[16] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0x17, 0x01, 0x48, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray14));
  uint8_t initarray15[20] = {0xBE, 0xA0, 0x12, 0x34, 0x01, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x2C, 0x50, 0x10, 0x86, 0x02};
  boost::asio::write(serial_, boost::asio::buffer(initarray15));

}

LFCDLaser::~LFCDLaser()
{
  
}

void LFCDLaser::poll(sensor_msgs::LaserScan::Ptr scan)
{
  uint8_t temp_char;
  uint8_t start_count = 0;
  bool got_scan = false;
  boost::array<uint8_t, 1208> raw_bytes;
  uint8_t good_sets = 0;
  uint32_t motor_speed = 0;
  //rpms=1000;
  int index;

  while (!shutting_down_ && !got_scan)
  {
    // Wait until first data sync of frame: 0xFA, 0xA0
    boost::asio::read(serial_, boost::asio::buffer(&raw_bytes[start_count], 1));
    //print("this is in poll function");
    if(0 == start_count)
    {
      if(0xBE == raw_bytes[start_count])
      {
        start_count = 1;
      }
    }
    else if(1 == start_count)
    {
      if(0xA0 == raw_bytes[start_count])
      {
        start_count = 2;
      }
      else
      {
        start_count = 0;
      }
    }
    else if(2 == start_count)
    {
      if(0x12 == raw_bytes[start_count])
      {
        start_count = 3;
      }
      else
      {
        start_count = 0;
      }
    }
    else if(3 == start_count)
    {
      if(0x34 == raw_bytes[start_count])
      {
        start_count = 4;
      }
      else
      {
        start_count = 0;
      }
    }
    else if(3 < start_count && start_count < 47)
    {
      start_count++;
    }
    else if(47 == start_count)
    {
      if(0x01 == raw_bytes[start_count])
      {
        // Do your decode here
        start_count = 0;
        got_scan = true;

        boost::asio::read(serial_, boost::asio::buffer(&raw_bytes[48], 1160));

        scan->angle_increment = (2.0*M_PI/360.0)*100.0/250.0;
        scan->angle_min = 0.0;
        scan->angle_max = 100.0*M_PI/180.0 - scan->angle_increment;
        scan->range_min = 0.0;
        scan->range_max = 10.0;
        scan->ranges.resize(250);
        scan->intensities.resize(250);
        scan->time_increment = 100.0/(90.0*180.0*(250-1));

        // fill distance data
        for(uint16_t i = 0; i < 250; i++)
        {
          uint16_t range = (((uint16_t)raw_bytes[48+2*i+1] * 256 + (uint16_t)raw_bytes[48+2*i]) & 0x7FF) * 10;
          uint16_t intensity = (uint16_t)(raw_bytes[48+2*i+1]>>5) * 128;
          scan->ranges[i] = range/1000.0;
          scan->intensities[i] = intensity;
        }
      }
      else
      {
        start_count = 0;
      } 
    }
  }
}
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "bea_microscan_publisher");
  ros::NodeHandle n;
  ros::NodeHandle priv_nh("~");

  std::string port;
  int baud_rate;
  std::string frame_id;

  //std_msgs::UInt16 rpms;

  priv_nh.param("port", port, std::string("/dev/ttyUSB1"));
  priv_nh.param("baud_rate", baud_rate, 921600);
  priv_nh.param("frame_id", frame_id, std::string("laser"));

  boost::asio::io_service io;

  try
  {
    bea_microscan::LFCDLaser laser(port, baud_rate, io);
    ros::Publisher laser_pub = n.advertise<sensor_msgs::LaserScan>("scan", 2000);

    while (ros::ok())
    {
      sensor_msgs::LaserScan::Ptr scan(new sensor_msgs::LaserScan);
      scan->header.frame_id = frame_id;
      laser.poll(scan);
      scan->header.stamp = ros::Time::now();
      //rpms.data=laser.rpms;
      laser_pub.publish(scan);
      ROS_INFO("I am running");
      //print("I am running"); 
    }
    laser.close();

    return 0;
  }
  catch (boost::system::system_error ex)
  {
    ROS_ERROR("An exception was thrown: %s", ex.what());
    return -1;
  }
}
